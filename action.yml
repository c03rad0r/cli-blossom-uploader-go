name: 'Blossom CLI Uploader'
description: 'Upload files to Blossom using the blossom-cli tool'
author: 'OpenTollGate'

inputs:
  host:
    description: 'Blossom host URL'
    required: true
    default: 'https://blossom.swissdash.site'
  filePath:
    description: 'Path to the file to upload'
    required: true
  nostrPrivateKey:
    description: 'Nostr private key (must be in nsec format)'
    required: true
  cliVersion:
    description: 'Version of blossom-cli to use'
    required: false
    default: 'latest'
  desiredExtension:
    description: 'Desired extension for the uploaded file'
    required: false
    default: 'bin'

outputs:
  url:
    description: 'URL of the uploaded file'
    value: ${{ steps.upload.outputs.url }}
  hash:
    description: 'Hash of the uploaded file'
    value: ${{ steps.upload.outputs.hash }}
  success:
    description: 'Whether the upload was successful (true/false)'
    value: ${{ steps.upload.outputs.success }}
  error:
    description: 'Error message if upload failed'
    value: ${{ steps.upload.outputs.error }}

runs:
  using: 'composite'
  steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Install blossom-cli
      id: install
      shell: bash
      run: |
        if command -v blossom-cli &> /dev/null; then
          echo "blossom-cli is already installed. Skipping installation."
          exit 0
        fi
        
        echo "Installing blossom-cli..."
        git clone https://github.com/girino/blossom-cli.git /tmp/blossom-cli
        cd /tmp/blossom-cli
        
        if [ "${{ inputs.cliVersion }}" != "latest" ]; then
          git checkout ${{ inputs.cliVersion }}
        fi
        
        # Modify go.mod to be compatible with our Go version
        sed -i 's/go 1.23.1/go 1.22/' go.mod
        sed -i '/toolchain/d' go.mod
        
        go mod download
        go build -o blossom-cli .

        # Try to build with modified dependencies
        echo "Building blossom-cli..."
        go mod tidy -compat=1.22
        
        # Try to downgrade dependencies if needed
        if ! go build -o blossom-cli .; then
          echo "Trying with downgraded dependencies..."
          go get github.com/nbd-wtf/go-nostr@v0.24.2
          go mod tidy -compat=1.22
          go build -o blossom-cli .
        fi

        # Move to a location in PATH
        sudo mv blossom-cli /usr/local/bin/
        
        echo "blossom-cli installed successfully"
    
    - name: Validate NSEC format
      shell: bash
      run: |
        # Check if the key is in nsec format
        if [[ ! "${{ inputs.nostrPrivateKey }}" =~ ^nsec ]]; then
          echo "Error: Private key must be in nsec format (starting with 'nsec')"
          echo "Please convert your hex key to nsec format before using this action"
          exit 1
        fi
    
    - name: Calculate file hash
      id: hash
      shell: bash
      run: |
        FILE_HASH=$(sha256sum "${{ inputs.filePath }}" | cut -d' ' -f1)
        echo "FILE_HASH=$FILE_HASH" >> $GITHUB_ENV
        echo "Original file hash: $FILE_HASH"
    
    - name: Upload file to Blossom
      id: upload
      shell: bash
      run: |
        # Create a temporary file for the private key
        echo "${{ inputs.nostrPrivateKey }}" > /tmp/nsec.key
        
        # Run the upload command with the correct format
        echo "Uploading file to Blossom..."
        echo "Command: blossom-cli upload -server \"${{ inputs.host }}\" -file \"${{ inputs.filePath }}\" -privkey \"$(cat /tmp/nsec.key)\""
        
        # Run with verbose output for debugging
        set -x
        RESULT=$(blossom-cli upload -server "${{ inputs.host }}" -file "${{ inputs.filePath }}" -privkey "$(cat /tmp/nsec.key)" 2>&1) || true
        UPLOAD_EXIT_CODE=$?
        set +x
        
        # Remove the private key file
        rm /tmp/nsec.key
        
        echo "Upload result: $RESULT"
        
        # Check if the result is valid JSON
        if echo "$RESULT" | jq -e . > /dev/null 2>&1; then
          # Extract URL from JSON
          ORIGINAL_URL=$(echo "$RESULT" | jq -r '.url' 2>/dev/null)
          HASH=$(echo "$RESULT" | jq -r '.sha256' 2>/dev/null)
          
          if [ -n "$ORIGINAL_URL" ] && [ "$ORIGINAL_URL" != "null" ]; then
            # Process the URL extension if desired
            if [ "${{ inputs.desiredExtension }}" != "bin" ]; then
              # Replace .bin with the desired extension
              PROCESSED_URL="${ORIGINAL_URL/.bin/.${{ inputs.desiredExtension }}}"
              echo "Original URL: $ORIGINAL_URL"
              echo "Processed URL with .${{ inputs.desiredExtension }} extension: $PROCESSED_URL"
              echo "url=$PROCESSED_URL" >> $GITHUB_OUTPUT
            else
              echo "url=$ORIGINAL_URL" >> $GITHUB_OUTPUT
            fi
            
            echo "hash=$HASH" >> $GITHUB_OUTPUT
            echo "success=true" >> $GITHUB_OUTPUT
            
            echo "Upload successful!"
            echo "Hash: $HASH"
            exit 0
          fi
        fi
        
        # If we get here, either no URL was found or there was an error
        echo "success=false" >> $GITHUB_OUTPUT
        echo "error=$RESULT" >> $GITHUB_OUTPUT
        
        if [ $UPLOAD_EXIT_CODE -eq 0 ]; then
          echo "Upload command exited successfully but no valid URL was found in the output"
          exit 0
        else
          echo "Upload failed with exit code $UPLOAD_EXIT_CODE"
          exit 1
        fi
